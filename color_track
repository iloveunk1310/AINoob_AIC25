{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12904827,"sourceType":"datasetVersion","datasetId":8127217},{"sourceId":12908077,"sourceType":"datasetVersion","datasetId":8167550}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#!/usr/bin/env python3\n\n\nimport json\nfrom pathlib import Path\nimport numpy as np\nfrom collections import defaultdict, Counter\n\n# ---------------- color helpers (same quantization logic as before) ----------------\ndef quantize_color_rgb(arr, bits_per_channel=3):\n    bins = 1 << bits_per_channel\n    shift = 8 - bits_per_channel\n    r = (arr[...,0] >> shift).astype(np.int32)\n    g = (arr[...,1] >> shift).astype(np.int32)\n    b = (arr[...,2] >> shift).astype(np.int32)\n    ids = (r * bins + g) * bins + b\n    return ids\n\ndef bin_id_to_rgb_center(bin_id, bits_per_channel=3):\n    bins = 1 << bits_per_channel\n    b = bin_id % bins\n    g = (bin_id // bins) % bins\n    r = (bin_id // (bins*bins)) % bins\n    shift = 8 - bits_per_channel\n    center = (np.array([r,g,b]) << shift) + (1 << (shift-1))\n    center = np.clip(center, 0, 255).astype(int)\n    return tuple(int(x) for x in center)\n\ndef rgb_to_hex(rgb):\n    return \"#{:02X}{:02X}{:02X}\".format(*rgb)\n\ndef rgb_to_hsv(rgb):\n    r,g,b = [x/255.0 for x in rgb]\n    mx = max(r,g,b); mn = min(r,g,b); diff = mx-mn\n    if diff == 0:\n        h = 0.0\n    elif mx == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    else:\n        h = (60 * ((r-g)/diff) + 240) % 360\n    s = 0.0 if mx == 0 else diff / mx\n    v = mx\n    return h, s, v\n\ndef hue_to_color_name(h):\n    if h is None:\n        return \"unknown\"\n    if h < 15 or h >= 345:\n        return \"red\"\n    if h < 45:\n        return \"orange\"\n    if h < 75:\n        return \"yellow\"\n    if h < 150:\n        return \"green\"\n    if h < 195:\n        return \"cyan\"\n    if h < 255:\n        return \"blue\"\n    if h < 285:\n        return \"purple\"\n    if h < 330:\n        return \"pink\"\n    return \"red\"\n\ndef get_dominant_color_of_crop(pil_img_crop, bits_per_channel=3, downsample=2):\n    arr = np.array(pil_img_crop.convert('RGB'))\n    if downsample > 1:\n        arr = arr[::downsample, ::downsample, :]\n    if arr.size == 0:\n        return None, None, None, 0\n    ids = quantize_color_rgb(arr, bits_per_channel=bits_per_channel)\n    ids_flat = ids.ravel()\n    counts = np.bincount(ids_flat)\n    if counts.size == 0:\n        return None, None, None, 0\n    best_id = int(np.argmax(counts))\n    count = int(counts[best_id])\n    rgb = bin_id_to_rgb_center(best_id, bits_per_channel=bits_per_channel)\n    hexc = rgb_to_hex(rgb)\n    h,s,v = rgb_to_hsv(rgb)\n    name = hue_to_color_name(h) if s > 0.15 and v > 0.12 else (\"white\" if v>0.9 else (\"black\" if v<0.12 else \"gray\"))\n    return hexc, rgb, name, count\n\n# ---------------- main batch processing ----------------\n\ndef find_image_for_stem(keyframes_dir: Path, stem: str):\n    # search recursively for a file with given stem\n    for ext in ('*.jpg', '*.jpeg', '*.png', '*.webp', '*.bmp'):\n        matches = list(keyframes_dir.rglob(f\"{stem}{ext}\"))\n        if matches:\n            return matches[0]\n    # also allow any file starting with stem\n    matches = list(keyframes_dir.rglob(f\"{stem}.*\"))\n    return matches[0] if matches else None\n\n\ndef process_all(keyframes_dir, objects_json_dir, out_dir, score_threshold=0.0,\n                bits_per_channel=3, downsample=2):\n    keyframes_dir = Path(keyframes_dir)\n    objects_json_dir = Path(objects_json_dir)\n    out_dir = Path(out_dir)\n    out_dir.mkdir(parents=True, exist_ok=True)\n\n    json_files = sorted(objects_json_dir.glob('*.json'))\n    if not json_files:\n        print('No JSON files found in', objects_json_dir)\n        return\n\n    for json_path in json_files:\n        try:\n            j = json.loads(json_path.read_text(encoding='utf-8'))\n        except Exception as e:\n            print('skip bad json', json_path, e)\n            continue\n\n        stem = json_path.stem\n        img_path = find_image_for_stem(keyframes_dir, stem)\n        if img_path is None:\n            print('No matching image for', json_path.name, '- skipping')\n            continue\n\n        try:\n            pil = Image.open(img_path).convert('RGB')\n        except Exception as e:\n            print('Cannot open image', img_path, e)\n            continue\n        W, H = pil.size\n\n        boxes = j.get('detection_boxes', [])\n        scores = j.get('detection_scores', None)\n        classes = j.get('detection_class_entities', j.get('detection_class_names', None))\n        if classes is None and 'detection_class_labels' in j:\n            classes = [str(x) for x in j.get('detection_class_labels',[])]\n\n        entries = []\n        n = min(len(boxes), len(classes) if classes is not None else len(boxes))\n        for i in range(n):\n            try:\n                raw_box = boxes[i]\n                box = [float(x) for x in raw_box]\n                x1,y1,x2,y2 = box\n                # if coords look absolute (>1.5) assume pixel coords\n                if max(x1,y1,x2,y2) > 1.5:\n                    x1_px, y1_px, x2_px, y2_px = int(x1), int(y1), int(x2), int(y2)\n                else:\n                    x1_px = int(max(0, min(1.0, x1)) * W)\n                    y1_px = int(max(0, min(1.0, y1)) * H)\n                    x2_px = int(max(0, min(1.0, x2)) * W)\n                    y2_px = int(max(0, min(1.0, y2)) * H)\n                if scores is not None:\n                    sc = float(scores[i])\n                    if sc < score_threshold:\n                        continue\n                cls_name = classes[i] if classes is not None else 'unknown'\n                if x2_px <= x1_px or y2_px <= y1_px:\n                    continue\n                crop = pil.crop((x1_px, y1_px, x2_px, y2_px))\n                hexc, rgb, name, cnt = get_dominant_color_of_crop(crop, bits_per_channel=bits_per_channel, downsample=downsample)\n                if hexc is None:\n                    continue\n                entries.append({\n                    'class': cls_name,\n                    'box_norm': [x1, y1, x2, y2],\n                    'box_px': [x1_px, y1_px, x2_px, y2_px],\n                    'score': float(scores[i]) if scores is not None else None,\n                    'dominant_hex': hexc,\n                    'dominant_rgb': list(rgb),\n                    'dominant_name': name,\n                    'pixel_count': int(cnt)\n                })\n            except Exception as e:\n                print('error processing detection', json_path.name, i, e)\n                continue\n\n        out = {\n            'image': str(img_path),\n            'json': str(json_path),\n            'entries': entries\n        }\n        out_file = out_dir / (stem + '.colors.json')\n        with open(out_file, 'w', encoding='utf-8') as f:\n            json.dump(out, f, ensure_ascii=False, indent=2)\n\n    print('Done. Outputs in', out_dir)\n\n\nif __name__ == '__main__':\n    # edit these paths as needed\n    KEYFRAMES_DIR = '/kaggle/input/detection-frame/detection_frame/frame'      # folder contains images\n    OBJECTS_JSON_DIR = '/kaggle/input/detection-frame/detection_frame/object'     # folder contains json files (001.json,...)\n    OUT_DIR = './object_colors_per_image'\n    SCORE_TH = 0.25\n    BITS = 3\n    DOWNSAMPLE = 2\n\n    process_all(KEYFRAMES_DIR, OBJECTS_JSON_DIR, OUT_DIR, score_threshold=SCORE_TH,\n                bits_per_channel=BITS, downsample=DOWNSAMPLE)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:13.454234Z","iopub.execute_input":"2025-09-03T18:48:13.454544Z","iopub.status.idle":"2025-09-03T18:48:13.485015Z","shell.execute_reply.started":"2025-09-03T18:48:13.454521Z","shell.execute_reply":"2025-09-03T18:48:13.483720Z"}},"outputs":[{"name":"stdout","text":"No JSON files found in /kaggle/input/detection-frame/detection_frame/object\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"data = pd.read_csv(\"/kaggle/input/query-res/query-2-kis.csv\")\ndata","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:20.036283Z","iopub.execute_input":"2025-09-03T18:48:20.036690Z","iopub.status.idle":"2025-09-03T18:48:20.104285Z","shell.execute_reply.started":"2025-09-03T18:48:20.036663Z","shell.execute_reply":"2025-09-03T18:48:20.103367Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"         query_name     video  frame_idx     score\n0    query-p1-2-kis  L24_V013       5952  0.447668\n1    query-p1-2-kis  L24_V022      15807  0.422072\n2    query-p1-2-kis  L24_V013       5914  0.384518\n3    query-p1-2-kis  L24_V013       7068  0.376767\n4    query-p1-2-kis  L24_V023      11096  0.340975\n..              ...       ...        ...       ...\n995  query-p1-2-kis  L22_V004      21345  0.000730\n996  query-p1-2-kis  L28_V024      19233  0.000730\n997  query-p1-2-kis  L22_V016      24775  0.000730\n998  query-p1-2-kis  L24_V010       3112  0.000729\n999  query-p1-2-kis  L24_V013       3596  0.000729\n\n[1000 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>query_name</th>\n      <th>video</th>\n      <th>frame_idx</th>\n      <th>score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V013</td>\n      <td>5952</td>\n      <td>0.447668</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V022</td>\n      <td>15807</td>\n      <td>0.422072</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V013</td>\n      <td>5914</td>\n      <td>0.384518</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V013</td>\n      <td>7068</td>\n      <td>0.376767</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V023</td>\n      <td>11096</td>\n      <td>0.340975</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>995</th>\n      <td>query-p1-2-kis</td>\n      <td>L22_V004</td>\n      <td>21345</td>\n      <td>0.000730</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>query-p1-2-kis</td>\n      <td>L28_V024</td>\n      <td>19233</td>\n      <td>0.000730</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>query-p1-2-kis</td>\n      <td>L22_V016</td>\n      <td>24775</td>\n      <td>0.000730</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V010</td>\n      <td>3112</td>\n      <td>0.000729</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>query-p1-2-kis</td>\n      <td>L24_V013</td>\n      <td>3596</td>\n      <td>0.000729</td>\n    </tr>\n  </tbody>\n</table>\n<p>1000 rows × 4 columns</p>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"ls = list(zip(data['video'], data['frame_idx']))\nls","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:23.831784Z","iopub.execute_input":"2025-09-03T18:48:23.832120Z","iopub.status.idle":"2025-09-03T18:48:23.865361Z","shell.execute_reply.started":"2025-09-03T18:48:23.832094Z","shell.execute_reply":"2025-09-03T18:48:23.864511Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"[('L24_V013', 5952),\n ('L24_V022', 15807),\n ('L24_V013', 5914),\n ('L24_V013', 7068),\n ('L24_V023', 11096),\n ('L24_V025', 8816),\n ('L24_V009', 5952),\n ('L24_V013', 11780),\n ('L24_V020', 8055),\n ('L24_V006', 10912),\n ('L24_V022', 8208),\n ('L24_V005', 2728),\n ('L24_V018', 11656),\n ('L24_V025', 10508),\n ('L24_V019', 5775),\n ('L24_V013', 1488),\n ('L24_V014', 2108),\n ('L24_V020', 11856),\n ('L24_V006', 2367),\n ('L24_V013', 3720),\n ('L24_V014', 3100),\n ('L24_V024', 3089),\n ('L24_V022', 15611),\n ('L24_V019', 8816),\n ('L24_V022', 6080),\n ('L24_V026', 3258),\n ('L24_V033', 3999),\n ('L24_V013', 11904),\n ('L24_V019', 7449),\n ('L24_V014', 2267),\n ('L24_V013', 12028),\n ('L24_V009', 10292),\n ('L24_V013', 3347),\n ('L24_V006', 13019),\n ('L24_V013', 4464),\n ('L24_V014', 2976),\n ('L24_V026', 11036),\n ('L24_V025', 7599),\n ('L24_V025', 8664),\n ('L24_V011', 5456),\n ('L24_V025', 8208),\n ('L24_V014', 9052),\n ('L24_V043', 10473),\n ('L24_V013', 12152),\n ('L24_V019', 6992),\n ('L24_V011', 8059),\n ('L24_V022', 15656),\n ('L22_V019', 21815),\n ('L24_V043', 7936),\n ('L24_V010', 8413),\n ('L24_V007', 11692),\n ('L24_V025', 7331),\n ('L22_V005', 16866),\n ('L24_V014', 2604),\n ('L24_V035', 13887),\n ('L24_V043', 8432),\n ('L24_V025', 7296),\n ('L24_V006', 11160),\n ('L24_V042', 6231),\n ('L24_V043', 6695),\n ('L24_V027', 4560),\n ('L29_V005', 16200),\n ('L24_V010', 5127),\n ('L24_V009', 6944),\n ('L24_V009', 7812),\n ('L24_V006', 11284),\n ('L24_V024', 15960),\n ('L24_V037', 7599),\n ('L28_V010', 18164),\n ('L24_V010', 3535),\n ('L24_V018', 5828),\n ('L24_V005', 6572),\n ('L24_V020', 3231),\n ('L24_V027', 10101),\n ('L24_V023', 12920),\n ('L24_V026', 12648),\n ('L24_V020', 10032),\n ('L24_V005', 13888),\n ('L28_V005', 22140),\n ('L24_V023', 15351),\n ('L24_V043', 13391),\n ('L24_V043', 4588),\n ('L24_V006', 11036),\n ('L24_V006', 7665),\n ('L24_V026', 2612),\n ('L24_V036', 5790),\n ('L24_V033', 14105),\n ('L24_V027', 14895),\n ('L24_V037', 9068),\n ('L24_V037', 15960),\n ('L24_V036', 6536),\n ('L24_V019', 6536),\n ('L24_V026', 12772),\n ('L24_V033', 4256),\n ('L24_V013', 6573),\n ('L24_V026', 11623),\n ('L30_V007', 7159),\n ('L22_V020', 15033),\n ('L24_V010', 2751),\n ('L24_V010', 2604),\n ('L24_V022', 7143),\n ('L24_V019', 12312),\n ('L24_V006', 12524),\n ('L24_V018', 9796),\n ('L24_V024', 14288),\n ('L24_V039', 7143),\n ('L22_V003', 2610),\n ('L24_V028', 8208),\n ('L24_V013', 3844),\n ('L24_V022', 9551),\n ('L24_V019', 3951),\n ('L21_V019', 4683),\n ('L28_V002', 20292),\n ('L24_V014', 9582),\n ('L24_V043', 15376),\n ('L24_V005', 6562),\n ('L24_V015', 8680),\n ('L28_V011', 16335),\n ('L24_V007', 12524),\n ('L24_V037', 7698),\n ('L24_V006', 7688),\n ('L24_V043', 7316),\n ('L24_V022', 16416),\n ('L24_V014', 2817),\n ('L24_V006', 13144),\n ('L21_V025', 27577),\n ('L28_V011', 27014),\n ('L24_V022', 3995),\n ('L24_V039', 4256),\n ('L28_V005', 21594),\n ('L28_V011', 27135),\n ('L24_V032', 10416),\n ('L24_V019', 6231),\n ('L24_V007', 7280),\n ('L24_V030', 7143),\n ('L24_V013', 10670),\n ('L24_V044', 929),\n ('L24_V027', 15503),\n ('L22_V012', 21015),\n ('L29_V005', 20655),\n ('L22_V010', 9718),\n ('L22_V014', 10712),\n ('L22_V011', 23883),\n ('L24_V012', 896),\n ('L24_V025', 14288),\n ('L22_V026', 9869),\n ('L24_V025', 15503),\n ('L24_V025', 3423),\n ('L22_V018', 28223),\n ('L22_V026', 9588),\n ('L30_V055', 1104),\n ('L22_V014', 5547),\n ('L30_V083', 6530),\n ('L24_V025', 14255),\n ('L24_V012', 851),\n ('L22_V014', 5844),\n ('L22_V011', 23969),\n ('L22_V024', 17328),\n ('L24_V025', 15960),\n ('L22_V026', 10263),\n ('L22_V029', 7293),\n ('L22_V026', 10310),\n ('L24_V024', 3192),\n ('L24_V025', 6687),\n ('L21_V011', 20677),\n ('L21_V027', 29130),\n ('L22_V014', 2876),\n ('L24_V021', 11096),\n ('L22_V018', 2699),\n ('L24_V025', 15464),\n ('L21_V013', 27530),\n ('L22_V019', 9345),\n ('L24_V025', 10335),\n ('L22_V011', 23331),\n ('L22_V026', 21131),\n ('L24_V023', 16263),\n ('L24_V025', 13016),\n ('L29_V002', 22518),\n ('L30_V051', 3886),\n ('L22_V014', 8424),\n ('L24_V025', 13071),\n ('L24_V017', 2328),\n ('L21_V011', 18981),\n ('L29_V004', 6827),\n ('L24_V024', 5472),\n ('L22_V006', 2318),\n ('L22_V026', 9356),\n ('L30_V003', 811),\n ('L21_V029', 4752),\n ('L21_V009', 24442),\n ('L24_V026', 7068),\n ('L24_V025', 5928),\n ('L22_V018', 2229),\n ('L30_V058', 618),\n ('L24_V009', 2232),\n ('L22_V014', 5754),\n ('L22_V004', 35850),\n ('L24_V022', 14895),\n ('L22_V008', 16357),\n ('L24_V023', 12008),\n ('L24_V035', 11304),\n ('L30_V051', 3838),\n ('L24_V024', 9728),\n ('L24_V009', 8556),\n ('L22_V027', 20978),\n ('L22_V026', 21915),\n ('L24_V007', 12772),\n ('L29_V008', 25455),\n ('L29_V008', 12285),\n ('L22_V028', 31209),\n ('L29_V004', 7715),\n ('L24_V023', 10335),\n ('L29_V004', 6394),\n ('L22_V010', 10577),\n ('L24_V026', 7192),\n ('L22_V027', 20702),\n ('L29_V005', 20954),\n ('L21_V013', 27294),\n ('L22_V010', 10674),\n ('L24_V025', 13376),\n ('L24_V025', 10488),\n ('L22_V004', 35880),\n ('L24_V012', 1888),\n ('L24_V024', 9576),\n ('L24_V017', 2432),\n ('L21_V011', 20484),\n ('L24_V026', 6765),\n ('L29_V008', 11965),\n ('L21_V025', 23580),\n ('L24_V005', 14260),\n ('L29_V004', 8481),\n ('L29_V005', 20239),\n ('L29_V005', 20520),\n ('L24_V009', 4836),\n ('L22_V027', 19824),\n ('L24_V022', 15960),\n ('L24_V007', 8680),\n ('L22_V028', 13175),\n ('L29_V005', 24847),\n ('L24_V037', 6822),\n ('L24_V023', 12312),\n ('L24_V012', 1024),\n ('L29_V023', 5397),\n ('L22_V018', 27983),\n ('L30_V053', 3979),\n ('L21_V013', 26820),\n ('L24_V019', 4863),\n ('L24_V026', 6324),\n ('L22_V012', 31005),\n ('L22_V031', 9185),\n ('L24_V043', 8059),\n ('L21_V018', 6030),\n ('L24_V009', 8432),\n ('L24_V021', 5624),\n ('L24_V019', 2432),\n ('L24_V025', 15656),\n ('L24_V019', 8967),\n ('L24_V035', 11400),\n ('L29_V008', 9679),\n ('L28_V018', 26318),\n ('L24_V007', 8213),\n ('L24_V007', 5704),\n ('L24_V022', 14744),\n ('L29_V008', 12150),\n ('L29_V008', 12015),\n ('L24_V014', 9424),\n ('L24_V023', 9156),\n ('L24_V009', 10295),\n ('L24_V026', 5084),\n ('L29_V005', 21060),\n ('L29_V007', 14310),\n ('L24_V008', 2108),\n ('L28_V021', 11826),\n ('L24_V014', 2728),\n ('L22_V008', 16380),\n ('L22_V011', 14691),\n ('L22_V029', 7565),\n ('L29_V004', 25515),\n ('L24_V025', 8511),\n ('L24_V019', 12464),\n ('L24_V009', 8308),\n ('L22_V026', 21306),\n ('L24_V021', 7751),\n ('L30_V083', 3885),\n ('L29_V023', 6403),\n ('L22_V014', 11009),\n ('L24_V025', 11096),\n ('L21_V016', 8462),\n ('L24_V007', 12028),\n ('L28_V005', 17545),\n ('L24_V043', 13763),\n ('L22_V011', 23643),\n ('L24_V005', 15500),\n ('L22_V013', 9369),\n ('L21_V009', 6229),\n ('L24_V011', 6747),\n ('L24_V007', 13019),\n ('L24_V022', 12768),\n ('L30_V038', 3888),\n ('L24_V024', 13224),\n ('L24_V023', 13832),\n ('L24_V024', 8816),\n ('L24_V023', 17024),\n ('L29_V005', 20528),\n ('L24_V037', 2888),\n ('L24_V042', 8208),\n ('L24_V025', 14439),\n ('L21_V003', 9951),\n ('L22_V029', 4935),\n ('L24_V021', 10323),\n ('L21_V003', 5564),\n ('L24_V011', 7237),\n ('L29_V005', 20250),\n ('L24_V009', 2108),\n ('L24_V017', 2823),\n ('L22_V004', 7445),\n ('L22_V011', 22190),\n ('L24_V023', 10944),\n ('L29_V004', 7092),\n ('L24_V009', 8209),\n ('L24_V007', 11904),\n ('L24_V037', 6840),\n ('L24_V021', 7599),\n ('L24_V012', 1693),\n ('L24_V042', 6384),\n ('L27_V006', 4032),\n ('L29_V007', 19305),\n ('L24_V017', 1083),\n ('L24_V021', 5928),\n ('L24_V009', 10416),\n ('L24_V014', 2480),\n ('L30_V055', 4064),\n ('L21_V003', 9960),\n ('L22_V018', 28013),\n ('L24_V037', 8816),\n ('L24_V024', 12008),\n ('L24_V025', 10283),\n ('L28_V021', 12150),\n ('L24_V017', 2567),\n ('L24_V020', 12159),\n ('L29_V007', 19170),\n ('L24_V021', 11493),\n ('L24_V007', 12276),\n ('L24_V009', 4464),\n ('L28_V021', 11610),\n ('L22_V019', 20583),\n ('L30_V058', 615),\n ('L29_V007', 17685),\n ('L24_V009', 9480),\n ('L22_V014', 16446),\n ('L29_V023', 23876),\n ('L24_V021', 11552),\n ('L21_V019', 26868),\n ('L24_V013', 7316),\n ('L24_V023', 12287),\n ('L24_V011', 6307),\n ('L28_V021', 11880),\n ('L22_V029', 7473),\n ('L24_V004', 8927),\n ('L24_V013', 1860),\n ('L24_V018', 10044),\n ('L22_V008', 16500),\n ('L24_V022', 7071),\n ('L29_V008', 11561),\n ('L24_V043', 7995),\n ('L21_V013', 30954),\n ('L24_V024', 9515),\n ('L29_V008', 12555),\n ('L24_V012', 1272),\n ('L24_V007', 6448),\n ('L24_V043', 14012),\n ('L24_V029', 13298),\n ('L24_V025', 6080),\n ('L24_V023', 11859),\n ('L24_V024', 13527),\n ('L24_V013', 1736),\n ('L22_V031', 7776),\n ('L24_V022', 16112),\n ('L24_V013', 10292),\n ('L29_V005', 21330),\n ('L24_V010', 1984),\n ('L22_V014', 5015),\n ('L22_V018', 27620),\n ('L24_V009', 6820),\n ('L24_V018', 11408),\n ('L24_V022', 13071),\n ('L24_V025', 8967),\n ('L24_V023', 4407),\n ('L30_V051', 4029),\n ('L24_V020', 12008),\n ('L22_V020', 28119),\n ('L30_V058', 608),\n ('L30_V003', 952),\n ('L24_V013', 3968),\n ('L30_V038', 3890),\n ('L30_V055', 4088),\n ('L24_V026', 10562),\n ('L30_V092', 2147),\n ('L21_V010', 7148),\n ('L22_V006', 2703),\n ('L30_V064', 3122),\n ('L22_V002', 11550),\n ('L24_V007', 6200),\n ('L24_V007', 7564),\n ('L24_V009', 4451),\n ('L24_V011', 10664),\n ('L29_V002', 3911),\n ('L24_V022', 8055),\n ('L21_V015', 7038),\n ('L22_V030', 17370),\n ('L21_V003', 5056),\n ('L24_V018', 8983),\n ('L27_V006', 4050),\n ('L24_V012', 1536),\n ('L30_V038', 4004),\n ('L30_V067', 1423),\n ('L22_V014', 16431),\n ('L24_V025', 8300),\n ('L22_V031', 8580),\n ('L24_V009', 6200),\n ('L22_V010', 9420),\n ('L24_V008', 10168),\n ('L24_V019', 8208),\n ('L22_V008', 8646),\n ('L22_V004', 2636),\n ('L24_V043', 7068),\n ('L24_V043', 9300),\n ('L22_V016', 32855),\n ('L24_V023', 4560),\n ('L24_V021', 7448),\n ('L28_V021', 11395),\n ('L24_V022', 11703),\n ('L24_V009', 2044),\n ('L22_V017', 5490),\n ('L24_V022', 10725),\n ('L24_V009', 10540),\n ('L22_V018', 13380),\n ('L24_V021', 5555),\n ('L24_V026', 10927),\n ('L29_V007', 19037),\n ('L21_V014', 6552),\n ('L28_V024', 13496),\n ('L29_V018', 17861),\n ('L22_V025', 11067),\n ('L24_V008', 8308),\n ('L29_V005', 21027),\n ('L21_V025', 6030),\n ('L24_V009', 11797),\n ('L24_V023', 8511),\n ('L24_V025', 13077),\n ('L22_V030', 3629),\n ('L24_V009', 4588),\n ('L24_V025', 6384),\n ('L21_V028', 2684),\n ('L24_V012', 1495),\n ('L24_V005', 12959),\n ('L24_V019', 11096),\n ('L24_V019', 10791),\n ('L24_V025', 7113),\n ('L22_V006', 18633),\n ('L22_V030', 17867),\n ('L29_V005', 24975),\n ('L24_V019', 9728),\n ('L29_V008', 12217),\n ('L22_V009', 5621),\n ('L24_V023', 4712),\n ('L22_V031', 7145),\n ('L24_V042', 9576),\n ('L24_V017', 303),\n ('L24_V019', 3648),\n ('L24_V012', 1920),\n ('L30_V031', 2473),\n ('L24_V019', 11193),\n ('L24_V023', 6687),\n ('L24_V012', 1152),\n ('L22_V031', 7604),\n ('L22_V011', 22709),\n ('L21_V025', 25350),\n ('L22_V007', 16768),\n ('L22_V004', 22107),\n ('L24_V009', 3968),\n ('L30_V058', 610),\n ('L21_V023', 2571),\n ('L24_V023', 15968),\n ('L29_V020', 14175),\n ('L24_V026', 5332),\n ('L21_V026', 2511),\n ('L24_V012', 1280),\n ('L24_V021', 9576),\n ('L24_V026', 8059),\n ('L22_V003', 20242),\n ('L29_V023', 10189),\n ('L21_V005', 21689),\n ('L24_V022', 11856),\n ('L24_V005', 6695),\n ('L21_V030', 5406),\n ('L24_V015', 13516),\n ('L24_V019', 9879),\n ('L24_V023', 13680),\n ('L22_V011', 28392),\n ('L24_V009', 3227),\n ('L23_V001', 294),\n ('L29_V005', 24300),\n ('L21_V029', 4818),\n ('L24_V024', 15656),\n ('L24_V042', 6002),\n ('L29_V016', 23895),\n ('L24_V019', 13527),\n ('L22_V031', 8040),\n ('L22_V025', 12291),\n ('L21_V027', 31538),\n ('L30_V053', 3619),\n ('L24_V023', 2127),\n ('L28_V014', 20399),\n ('L21_V016', 11358),\n ('L24_V024', 2051),\n ('L24_V025', 13527),\n ('L24_V011', 13391),\n ('L29_V008', 25920),\n ('L24_V043', 13874),\n ('L24_V013', 10168),\n ('L24_V037', 7143),\n ('L24_V043', 14224),\n ('L24_V022', 7904),\n ('L21_V003', 25666),\n ('L30_V038', 3889),\n ('L24_V021', 5319),\n ('L24_V038', 759),\n ('L24_V008', 5680),\n ('L24_V010', 10664),\n ('L22_V029', 7443),\n ('L24_V021', 12008),\n ('L24_V019', 5928),\n ('L24_V009', 6695),\n ('L29_V005', 24921),\n ('L22_V023', 3326),\n ('L24_V043', 11160),\n ('L24_V038', 6840),\n ('L22_V021', 2397),\n ('L24_V032', 14012),\n ('L22_V030', 7202),\n ('L24_V024', 8511),\n ('L24_V044', 78),\n ('L22_V006', 10095),\n ('L24_V021', 13376),\n ('L24_V022', 4863),\n ('L24_V021', 13359),\n ('L24_V005', 5580),\n ('L29_V021', 9450),\n ('L24_V009', 5704),\n ('L24_V043', 13019),\n ('L24_V018', 11284),\n ('L24_V042', 2127),\n ('L24_V019', 10944),\n ('L24_V012', 1408),\n ('L29_V002', 14291),\n ('L30_V034', 4674),\n ('L22_V006', 2861),\n ('L24_V013', 8432),\n ('L24_V026', 2004),\n ('L24_V023', 16112),\n ('L24_V023', 4863),\n ('L24_V021', 15807),\n ('L21_V027', 8885),\n ('L24_V023', 13376),\n ('L24_V038', 5319),\n ('L29_V005', 16335),\n ('L29_V004', 6615),\n ('L26_V400', 627),\n ('L21_V002', 28913),\n ('L24_V043', 11532),\n ('L24_V032', 12648),\n ('L24_V014', 8928),\n ('L24_V025', 13983),\n ('L22_V026', 8882),\n ('L24_V026', 2356),\n ('L24_V005', 10077),\n ('L24_V021', 6875),\n ('L29_V005', 21284),\n ('L22_V015', 10407),\n ('L24_V009', 9548),\n ('L21_V022', 22868),\n ('L22_V002', 11992),\n ('L24_V026', 12028),\n ('L21_V006', 8523),\n ('L21_V027', 8855),\n ('L21_V019', 27033),\n ('L22_V010', 1739),\n ('L22_V030', 7350),\n ('L24_V023', 16416),\n ('L24_V019', 7599),\n ('L24_V015', 9052),\n ('L29_V008', 12420),\n ('L22_V024', 9727),\n ('L24_V014', 8812),\n ('L24_V021', 14439),\n ('L24_V009', 7068),\n ('L24_V023', 6992),\n ('L21_V015', 4310),\n ('L21_V007', 21258),\n ('L24_V011', 5208),\n ('L21_V009', 25080),\n ('L24_V005', 10292),\n ('L24_V021', 10640),\n ('L22_V029', 7398),\n ('L29_V005', 22071),\n ('L24_V007', 12896),\n ('L24_V005', 14043),\n ('L22_V013', 6716),\n ('L21_V011', 20040),\n ('L24_V018', 9176),\n ('L28_V024', 13500),\n ('L29_V004', 7155),\n ('L24_V039', 9597),\n ('L22_V012', 21512),\n ('L24_V037', 4712),\n ('L30_V083', 3621),\n ('L24_V025', 7766),\n ('L22_V019', 21635),\n ('L30_V053', 3132),\n ('L24_V023', 15183),\n ('L24_V007', 8308),\n ('L24_V026', 6289),\n ('L29_V023', 13476),\n ('L24_V021', 7904),\n ('L24_V023', 10184),\n ('L24_V035', 8324),\n ('L22_V005', 16415),\n ('L21_V007', 18738),\n ('L24_V042', 2472),\n ('L24_V005', 10168),\n ('L24_V013', 11690),\n ('L24_V022', 11121),\n ('L29_V020', 14166),\n ('L22_V031', 7555),\n ('L28_V019', 26908),\n ('L24_V022', 6384),\n ('L21_V015', 7233),\n ('L30_V003', 2216),\n ('L29_V008', 11610),\n ('L24_V043', 11408),\n ('L24_V021', 14393),\n ('L29_V002', 22143),\n ('L24_V044', 735),\n ('L24_V026', 13326),\n ('L24_V013', 9424),\n ('L24_V005', 6820),\n ('L22_V024', 17153),\n ('L24_V026', 3347),\n ('L24_V039', 6384),\n ('L22_V025', 10919),\n ('L22_V002', 11901),\n ('L24_V025', 7143),\n ('L24_V024', 11552),\n ('L29_V004', 6884),\n ('L29_V021', 9440),\n ('L28_V024', 15525),\n ('L28_V010', 26808),\n ('L24_V006', 2108),\n ('L21_V012', 9723),\n ('L30_V083', 1412),\n ('L29_V002', 17133),\n ('L29_V003', 21175),\n ('L24_V036', 6992),\n ('L24_V026', 2232),\n ('L21_V019', 27231),\n ('L29_V005', 20385),\n ('L29_V005', 22950),\n ('L24_V009', 6152),\n ('L24_V037', 10032),\n ('L28_V013', 23760),\n ('L24_V009', 7054),\n ('L21_V014', 9756),\n ('L24_V014', 4863),\n ('L22_V015', 10617),\n ('L21_V025', 23212),\n ('L21_V030', 4437),\n ('L24_V011', 4588),\n ('L24_V007', 12152),\n ('L22_V009', 7470),\n ('L24_V009', 4092),\n ('L24_V025', 7976),\n ('L24_V005', 12695),\n ('L21_V025', 25500),\n ('L30_V058', 595),\n ('L29_V004', 7893),\n ('L21_V003', 9660),\n ('L22_V019', 21665),\n ('L24_V014', 2356),\n ('L30_V034', 3614),\n ('L30_V039', 5354),\n ('L24_V007', 6944),\n ('L24_V026', 4412),\n ('L24_V023', 16719),\n ('L24_V026', 10044),\n ('L24_V013', 9548),\n ('L24_V026', 12152),\n ('L24_V009', 6076),\n ('L24_V008', 5084),\n ('L24_V028', 2280),\n ('L29_V002', 19643),\n ('L24_V007', 868),\n ('L24_V008', 11140),\n ('L24_V011', 11904),\n ('L29_V007', 12996),\n ('L22_V008', 9122),\n ('L24_V021', 13527),\n ('L21_V009', 24600),\n ('L24_V019', 10793),\n ('L22_V023', 3421),\n ('L22_V009', 7444),\n ('L24_V006', 9300),\n ('L24_V035', 8664),\n ('L22_V030', 18215),\n ('L22_V020', 28730),\n ('L24_V013', 9672),\n ('L29_V023', 8897),\n ('L24_V023', 5624),\n ('L22_V014', 17582),\n ('L21_V027', 18726),\n ('L24_V026', 6448),\n ('L22_V031', 7800),\n ('L28_V021', 12012),\n ('L21_V009', 24072),\n ('L22_V002', 4050),\n ('L24_V005', 8804),\n ('L21_V008', 8820),\n ('L22_V031', 8498),\n ('L21_V016', 26706),\n ('L28_V021', 12015),\n ('L24_V038', 6780),\n ('L28_V013', 14985),\n ('L21_V009', 21570),\n ('L24_V043', 13144),\n ('L24_V019', 11216),\n ('L30_V056', 4409),\n ('L29_V004', 5805),\n ('L29_V008', 18360),\n ('L22_V022', 21543),\n ('L24_V017', 1608),\n ('L21_V015', 9170),\n ('L22_V018', 27590),\n ('L21_V011', 20818),\n ('L22_V014', 11069),\n ('L24_V014', 5208),\n ('L22_V010', 9270),\n ('L29_V005', 9362),\n ('L24_V026', 6820),\n ('L30_V038', 4819),\n ('L24_V009', 6516),\n ('L22_V006', 7886),\n ('L22_V010', 10135),\n ('L30_V037', 1097),\n ('L22_V022', 8559),\n ('L24_V024', 7143),\n ('L24_V044', 396),\n ('L24_V007', 7068),\n ('L24_V021', 5775),\n ('L24_V038', 7061),\n ('L24_V042', 9728),\n ('L24_V014', 6572),\n ('L24_V016', 3859),\n ('L29_V012', 12347),\n ('L24_V014', 2054),\n ('L30_V003', 2360),\n ('L24_V043', 13268),\n ('L24_V013', 4092),\n ('L24_V017', 1739),\n ('L29_V002', 18829),\n ('L24_V023', 9272),\n ('L24_V024', 13680),\n ('L22_V014', 4817),\n ('L24_V043', 12524),\n ('L24_V022', 11247),\n ('L29_V023', 5572),\n ('L22_V008', 8961),\n ('L21_V007', 18906),\n ('L29_V021', 4712),\n ('L21_V011', 20291),\n ('L22_V011', 24206),\n ('L24_V043', 6232),\n ('L29_V018', 15119),\n ('L24_V009', 5556),\n ('L24_V043', 8867),\n ('L24_V021', 15656),\n ('L24_V018', 11160),\n ('L24_V044', 80),\n ('L24_V043', 14260),\n ('L24_V025', 13224),\n ('L22_V014', 8487),\n ('L24_V009', 11036),\n ('L24_V032', 8432),\n ('L22_V005', 2237),\n ('L22_V031', 2672),\n ('L24_V008', 1984),\n ('L29_V007', 19980),\n ('L29_V002', 18954),\n ('L24_V022', 3495),\n ('L24_V020', 9576),\n ('L24_V014', 9300),\n ('L24_V005', 12152),\n ('L24_V021', 10335),\n ('L22_V019', 1926),\n ('L22_V030', 5485),\n ('L29_V007', 15255),\n ('L22_V020', 15237),\n ('L22_V031', 7259),\n ('L24_V005', 11408),\n ('L22_V023', 4207),\n ('L24_V017', 759),\n ('L30_V038', 3886),\n ('L28_V008', 12555),\n ('L24_V042', 8967),\n ('L24_V038', 5472),\n ('L24_V024', 5168),\n ('L22_V016', 10340),\n ('L24_V005', 13763),\n ('L30_V081', 2099),\n ('L24_V013', 1984),\n ('L23_V021', 4246),\n ('L29_V021', 9720),\n ('L24_V028', 2852),\n ('L24_V008', 5012),\n ('L24_V007', 2356),\n ('L24_V017', 2303),\n ('L29_V020', 5708),\n ('L21_V009', 24712),\n ('L30_V081', 1562),\n ('L22_V031', 8291),\n ('L29_V005', 9450),\n ('L29_V004', 7441),\n ('L30_V048', 5846),\n ('L24_V007', 8556),\n ('L24_V029', 6080),\n ('L29_V004', 8641),\n ('L29_V016', 18765),\n ('L22_V023', 17066),\n ('L24_V019', 13680),\n ('L22_V019', 7205),\n ('L30_V084', 3429),\n ('L30_V034', 4676),\n ('L22_V020', 14943),\n ('L24_V007', 10044),\n ('L30_V056', 2156),\n ('L29_V018', 20953),\n ('L24_V014', 12595),\n ('L29_V021', 16543),\n ('L22_V001', 30552),\n ('L24_V027', 12615),\n ('L28_V001', 21499),\n ('L24_V023', 12464),\n ('L24_V020', 7143),\n ('L29_V021', 22273),\n ('L24_V043', 1860),\n ('L24_V009', 3797),\n ('L24_V043', 6324),\n ('L22_V027', 19850),\n ('L24_V019', 8511),\n ('L24_V036', 5168),\n ('L24_V008', 8680),\n ('L22_V004', 25403),\n ('L24_V038', 132),\n ('L24_V009', 3596),\n ('L24_V023', 4359),\n ('L24_V005', 12772),\n ('L24_V042', 8360),\n ('L24_V013', 6820),\n ('L29_V023', 6335),\n ('L24_V021', 7347),\n ('L21_V027', 9689),\n ('L22_V006', 2771),\n ('L29_V005', 11745),\n ('L24_V037', 12768),\n ('L24_V013', 6695),\n ('L21_V023', 32067),\n ('L21_V011', 20430),\n ('L24_V021', 12303),\n ('L24_V008', 10292),\n ('L22_V004', 2592),\n ('L30_V049', 3236),\n ('L24_V007', 6076),\n ('L24_V028', 2888),\n ('L24_V012', 340),\n ('L21_V001', 4932),\n ('L24_V024', 2432),\n ('L28_V019', 27000),\n ('L22_V018', 12147),\n ('L26_V488', 873),\n ('L24_V025', 5817),\n ('L24_V022', 4560),\n ('L29_V005', 22140),\n ('L24_V008', 9952),\n ('L24_V008', 9755),\n ('L26_V377', 355),\n ('L21_V022', 4893),\n ('L24_V011', 4712),\n ('L24_V026', 11160),\n ('L24_V015', 7980),\n ('L26_V340', 300),\n ('L28_V007', 7994),\n ('L24_V026', 7936),\n ('L22_V019', 10005),\n ('L24_V025', 7448),\n ('L24_V039', 7296),\n ('L22_V002', 2400),\n ('L29_V007', 15231),\n ('L21_V014', 5520),\n ('L22_V019', 7835),\n ('L24_V038', 7296),\n ('L24_V003', 17280),\n ('L22_V009', 6360),\n ('L24_V030', 6231),\n ('L29_V018', 16896),\n ('L21_V013', 26990),\n ('L24_V019', 10488),\n ('L22_V028', 6353),\n ('L24_V025', 4863),\n ('L29_V023', 10260),\n ('L24_V021', 8055),\n ('L22_V007', 16870),\n ('L24_V008', 8556),\n ('L22_V014', 16989),\n ('L24_V023', 12800),\n ('L24_V007', 10292),\n ('L30_V037', 4570),\n ('L22_V004', 38303),\n ('L24_V022', 5624),\n ('L30_V046', 2922),\n ('L21_V012', 21359),\n ('L24_V006', 11685),\n ('L22_V019', 4617),\n ('L21_V015', 4671),\n ('L24_V021', 8208),\n ('L24_V023', 8337),\n ('L29_V002', 22268),\n ('L24_V005', 3100),\n ('L24_V022', 9423),\n ('L24_V003', 17193),\n ('L30_V092', 2171),\n ('L24_V020', 10944),\n ('L24_V025', 4712),\n ('L30_V031', 2616),\n ('L29_V002', 19364),\n ('L24_V008', 13335),\n ('L22_V012', 564),\n ('L29_V023', 20655),\n ('L24_V035', 8360),\n ('L22_V018', 28103),\n ('L28_V003', 27541),\n ('L22_V014', 7316),\n ('L30_V043', 4155),\n ('L24_V032', 8363),\n ('L21_V018', 6177),\n ('L24_V023', 10829),\n ('L22_V030', 15661),\n ('L29_V007', 12363),\n ('L24_V020', 11703),\n ('L24_V037', 3800),\n ('L28_V003', 23827),\n ('L29_V008', 12723),\n ('L22_V002', 2550),\n ('L22_V010', 9924),\n ('L29_V016', 24771),\n ('L29_V005', 3375),\n ('L22_V003', 26939),\n ('L24_V007', 7192),\n ('L24_V005', 8680),\n ('L22_V006', 1922),\n ('L22_V014', 33387),\n ('L24_V013', 10031),\n ('L24_V017', 752),\n ('L29_V021', 16024),\n ('L24_V027', 10184),\n ('L24_V042', 12768),\n ('L22_V010', 10767),\n ('L24_V013', 1151),\n ('L24_V007', 744),\n ('L29_V023', 5008),\n ('L28_V014', 19440),\n ('L24_V012', 640),\n ('L26_V400', 300),\n ('L30_V034', 4867),\n ('L28_V018', 25917),\n ('L21_V014', 6144),\n ('L24_V025', 4560),\n ('L24_V021', 10791),\n ('L24_V023', 6404),\n ('L22_V011', 22769),\n ('L22_V002', 3992),\n ('L22_V023', 3886),\n ('L24_V043', 9176),\n ('L24_V006', 9424),\n ('L24_V043', 11780),\n ('L24_V023', 11552),\n ('L24_V011', 1860),\n ('L22_V004', 21345),\n ('L28_V024', 19233),\n ('L22_V016', 24775),\n ('L24_V010', 3112),\n ('L24_V013', 3596)]"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"import os\nos.makedirs(\"detect_frame\", exist_ok=True)\nos.makedirs(\"detect_frame/frame\", exist_ok=True)\nos.makedirs(\"detect_frame/object\", exist_ok=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:33.963112Z","iopub.execute_input":"2025-09-03T18:48:33.963517Z","iopub.status.idle":"2025-09-03T18:48:33.969560Z","shell.execute_reply.started":"2025-09-03T18:48:33.963484Z","shell.execute_reply":"2025-09-03T18:48:33.968644Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"def clear_folder(folder_path):\n    \"\"\"\n    Deletes all files and subdirectories within a specified folder,\n    but keeps the folder itself.\n    \"\"\"\n    if not os.path.exists(folder_path):\n        print(f\"Error: Folder '{folder_path}' does not exist.\")\n        return\n\n    for item in os.listdir(folder_path):\n        item_path = os.path.join(folder_path, item)\n        try:\n            if os.path.isfile(item_path) or os.path.islink(item_path):\n                os.unlink(item_path)  # Remove file or symbolic link\n            elif os.path.isdir(item_path):\n                shutil.rmtree(item_path)  # Remove directory and its contents recursively\n        except Exception as e:\n            print(f\"Could not delete {item_path}. Reason: {e}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:36.280408Z","iopub.execute_input":"2025-09-03T18:48:36.280741Z","iopub.status.idle":"2025-09-03T18:48:36.287665Z","shell.execute_reply.started":"2025-09-03T18:48:36.280715Z","shell.execute_reply":"2025-09-03T18:48:36.286746Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"import shutil\n\ndef take_frame_obj(video, keyfr):\n    path = \"/kaggle/input/aic-data/data/map-keyframes-aic25-b1/map-keyframes/\" + video + \".csv\"\n    df = pd.read_csv(path)\n    ls = np.array(list(df['frame_idx']))\n    key_ = 0\n    for i in range(len(ls)):\n        if (ls[i] > keyfr) and (ls[i-1] <= keyfr):\n            key_ = i\n            break\n    str_key = str(key_).zfill(3)\n    path_to_frame = \"/kaggle/input/aic-data/data/keyframe/Keyframes_\" + video[:3] + \"/keyframes/\" + video + \"/\" + str_key + \".jpg\" \n    path_to_obj = \"/kaggle/input/aic-data/data/objects-aic25-b1/objects/\" + video + \"/\" + str_key + \".json\"\n    des_name = video + \"_\" + str_key + \".jpg\"\n    des_name_obj = video + \"_\" + str_key + \".json\"\n    des_path = os.path.join(\"detect_frame/frame\", des_name)\n    des_path_obj = os.path.join(\"detect_frame/object\", des_name_obj)\n    shutil.copy(path_to_frame, des_path)\n    shutil.copy(path_to_obj, des_path_obj)\n    \n    \nclear_folder(\"detect_frame/frame\")\nclear_folder(\"detect_frame/object\")\nfor key in ls:\n    take_frame_obj(key[0], key[1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:48:42.860207Z","iopub.execute_input":"2025-09-03T18:48:42.860905Z","iopub.status.idle":"2025-09-03T18:49:04.946594Z","shell.execute_reply.started":"2025-09-03T18:48:42.860870Z","shell.execute_reply":"2025-09-03T18:49:04.945682Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"KEYFRAMES_DIR = '/kaggle/working/detect_frame/frame'      # folder contains images\nOBJECTS_JSON_DIR = '/kaggle/working/detect_frame/object'     # folder contains json files (001.json,...)\nOUT_DIR = './object_colors'\nSCORE_TH = 0.25\nBITS = 3\nDOWNSAMPLE = 2\n\nprocess_all(KEYFRAMES_DIR, OBJECTS_JSON_DIR, OUT_DIR, score_threshold=SCORE_TH,\n                bits_per_channel=BITS, downsample=DOWNSAMPLE)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:49:16.383413Z","iopub.execute_input":"2025-09-03T18:49:16.383973Z","iopub.status.idle":"2025-09-03T18:49:36.699131Z","shell.execute_reply.started":"2025-09-03T18:49:16.383940Z","shell.execute_reply":"2025-09-03T18:49:36.698005Z"}},"outputs":[{"name":"stdout","text":"Done. Outputs in object_colors\n","output_type":"stream"}],"execution_count":9},{"cell_type":"code","source":"def count_files_os(directory_path):\n    \"\"\"Counts the number of files in a given directory using os module.\"\"\"\n    file_count = 0\n    try:\n        for entry in os.listdir(directory_path):\n            full_path = os.path.join(directory_path, entry)\n            if os.path.isfile(full_path):\n                file_count += 1\n        return file_count\n    except FileNotFoundError:\n        print(f\"Error: Directory '{directory_path}' not found.\")\n        return 0\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return 0\n\n# Example usage:\nfolder_path = \"/kaggle/working/detect_frame/frame\"  # Replace with the actual path\nnum_files = count_files_os(folder_path)\nprint(f\"Number of files in '{folder_path}': {num_files}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-03T18:50:14.877021Z","iopub.execute_input":"2025-09-03T18:50:14.877381Z","iopub.status.idle":"2025-09-03T18:50:14.893098Z","shell.execute_reply.started":"2025-09-03T18:50:14.877358Z","shell.execute_reply":"2025-09-03T18:50:14.891671Z"}},"outputs":[{"name":"stdout","text":"Number of files in '/kaggle/working/detect_frame/frame': 1000\n","output_type":"stream"}],"execution_count":10}]}